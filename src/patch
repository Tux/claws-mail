diff --git a/src/folder.c b/src/folder.c
index 2a8d862..c080f8c 100644
--- a/src/folder.c
+++ b/src/folder.c
@@ -969,7 +969,7 @@ void folder_scan_tree(Folder *folder, gboolean rebuild)
 FolderItem *folder_create_folder(FolderItem *parent, const gchar *name)
 {
 	FolderItem *new_item;
-	
+
 	cm_return_val_if_fail(parent != NULL, NULL);
 
 	new_item = parent->folder->klass->create_folder(parent->folder, parent, name);
diff --git a/src/imap.c b/src/imap.c
index 8870719..9086635 100644
--- a/src/imap.c
+++ b/src/imap.c
@@ -290,6 +290,12 @@ static FolderItem *imap_create_special_folder
 static gint imap_do_copy_msgs		(Folder		*folder,
 					 FolderItem	*dest,
 					 MsgInfoList	*msglist,
+					 GHashTable	*relation,
+					 gboolean	 same_dest_ok);
+
+static gint imap_do_remove_msgs		(Folder		*folder,
+					 FolderItem	*dest,
+					 MsgInfoList	*msglist,
 					 GHashTable	*relation);
 
 static void imap_delete_all_cached_messages	(FolderItem	*item);
@@ -1810,7 +1816,8 @@ static GSList *flatten_mailimap_set(struct mailimap_set * set)
 	return result;
 }
 static gint imap_do_copy_msgs(Folder *folder, FolderItem *dest, 
-			      MsgInfoList *msglist, GHashTable *relation)
+			      MsgInfoList *msglist, GHashTable *relation,
+			      gboolean same_dest_ok)
 {
 	FolderItem *src;
 	gchar *destdir;
@@ -1834,7 +1841,7 @@ static gint imap_do_copy_msgs(Folder *folder, FolderItem *dest,
 
 	msginfo = (MsgInfo *)msglist->data;
 	src = msginfo->folder;
-	if (src == dest) {
+	if (!same_dest_ok && src == dest) {
 		g_warning("the src folder is identical to the dest.\n");
 		return -1;
 	}
@@ -2018,10 +2025,32 @@ static gint imap_copy_msgs(Folder *folder, FolderItem *dest,
 	msginfo = (MsgInfo *)msglist->data;
 	g_return_val_if_fail(msginfo->folder != NULL, -1);
 
-	ret = imap_do_copy_msgs(folder, dest, msglist, relation);
+	ret = imap_do_copy_msgs(folder, dest, msglist, relation, FALSE);
 	return ret;
 }
 
+static gboolean imap_renumber_msg(MsgInfo *info)
+{
+	GSList msglist;
+	int ret;
+
+	g_return_val_if_fail(info != NULL, -1);
+
+	msglist.data = info;
+	msglist.next = NULL;
+
+	ret = imap_do_copy_msgs(info->folder->folder, info->folder, &msglist,
+				NULL, TRUE);
+	if (ret == 0)
+		ret = imap_do_remove_msgs(info->folder->folder, info->folder,
+					  &msglist, NULL);
+
+	if (ret == 0)
+		ret = folder_item_scan_full(info->folder, FALSE);
+
+	return ret == 0;
+}
+
 static gboolean imap_matcher_type_is_local(gint matchertype)
 {
 	switch (matchertype) {
@@ -3069,6 +3098,17 @@ static FolderItem *imap_create_folder(Folder *folder, FolderItem *parent,
 	g_return_val_if_fail(parent != NULL, NULL);
 	g_return_val_if_fail(name != NULL, NULL);
 
+	if (to_number(name) > 0) {
+		MsgInfo *info = folder_item_get_msginfo(parent, to_number(name));
+		if (info != NULL) {
+			gboolean ok = imap_renumber_msg(info);
+			procmsg_msginfo_free(info);
+			if (!ok) {
+				return NULL;
+			}
+		}
+	}
+
 	debug_print("getting session...\n");
 	session = imap_session_get(folder);
 	if (!session) {
diff --git a/src/mh.c b/src/mh.c
index e7b9888..b3fbc9c 100644
--- a/src/mh.c
+++ b/src/mh.c
@@ -43,6 +43,7 @@
 #include "statusbar.h"
 #include "gtkutils.h"
 #include "timing.h"
+#include "msgcache.h"
 
 /* Define possible missing constants for Windows. */
 #ifdef G_OS_WIN32
@@ -368,6 +369,11 @@ static gchar *mh_get_new_msg_filename(FolderItem *dest)
 	destpath = folder_item_get_path(dest);
 	cm_return_val_if_fail(destpath != NULL, NULL);
 
+	if (dest->last_num < 0) {
+		mh_get_last_num(dest->folder, dest);
+		if (dest->last_num < 0) return NULL;
+	}
+
 	if (!is_dir_exist(destpath))
 		make_dir_hier(destpath);
 
@@ -867,6 +873,30 @@ static gchar *mh_item_get_path(Folder *folder, FolderItem *item)
 	return real_path;
 }
 
+static gboolean mh_renumber_msg(MsgInfo *info)
+{
+	gchar *src, *dest;
+	gboolean result = FALSE;
+	guint num;
+	cm_return_val_if_fail(info != NULL, FALSE);
+
+	src = folder_item_fetch_msg(info->folder, info->msgnum);
+	dest = mh_get_new_msg_filename(info->folder);
+	num = info->folder->last_num + 1;
+
+	if (move_file(src, dest, FALSE) == 0) {
+		msgcache_remove_msg(info->folder->cache, info->msgnum);
+		info->msgnum = num;
+		msgcache_add_msg(info->folder->cache, info);
+		result = TRUE;
+	}
+
+	g_free(src);
+	g_free(dest);
+
+	return result;
+}
+
 static FolderItem *mh_create_folder(Folder *folder, FolderItem *parent,
 				    const gchar *name)
 {
@@ -884,12 +914,24 @@ static FolderItem *mh_create_folder(Folder *folder, FolderItem *parent,
 	if (!is_dir_exist(path)) 
 		if (make_dir_hier(path) != 0)
 			return NULL;
-		
+
 	real_name = mh_filename_from_utf8(name);
 	fullpath = g_strconcat(path, G_DIR_SEPARATOR_S, real_name, NULL);
 	g_free(real_name);
 	g_free(path);
 
+	if (to_number(name) > 0) {
+		MsgInfo *info = folder_item_get_msginfo(parent, to_number(name));
+		if (info != NULL) {
+			gboolean ok = mh_renumber_msg(info);
+			procmsg_msginfo_free(info);
+			if (!ok) {
+				g_free(fullpath);
+				return NULL;
+			}
+		}
+	}
+
 	if (make_dir(fullpath) < 0) {
 		g_free(fullpath);
 		return NULL;
